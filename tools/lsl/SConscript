import os, sys, subprocess, glob

Import('gDebug')

try:
    itubras = os.environ['ITUBRAS']
except:
    itubras = '../../'

includePath = ['include', 'src', 'src/lua', 
itubras + '/deps/irrlicht/include']

env = Environment(CPPPATH = includePath, MSVS_VERSION='9.0')

gPlatform = Environment()['PLATFORM']

libName = 'libs/libCLSL'
LibPath = ['libs', itubras + '/libs/release']
if gDebug:
    LibPath = ['libs', itubras + '/libs/debug']
    libName = 'libs/libCLSL_d'
libCCFlags = ''
libLNFlags = ''
progCCFlags = ''
progLNFlags = ''
if gPlatform == 'win32':
    defines = ' /D "WIN32" /D "_LIB"  /D "_IRR_STATIC_LIB_"'
    if gDebug:
        libCCFlags = '/Od /Gm /EHsc /RTC1 /MTd /W3 /c /ZI'
        progCCFlags = '/Od /Gm /EHsc /RTC1 /MTd /W3 /c /ZI'
        defines = defines + ' /D "_DEBUG"'
        progLNFlags = '/DEBUG /SUBSYSTEM:WINDOWS /MACHINE:X86'

    else:
        libCCFlags = '/O2 /GL /FD /EHsc /MT /W3 /c /Zi'
        progCCFlags = '/Od /Gm /FD /EHsc /MT /W3 /c /Zi'
        progLNFlags = '/LTCG /SUBSYSTEM:WINDOWS /MACHINE:X86'
        defines = defines + ' /D "NDEBUG"'
        libLNFlags = '/LTCG'

    libCCFlags += defines
    progCCFlags += defines
        
elif gPlatform == 'posix':
    if gDebug:
        libCCFlags = '-g'
        progCCFlags = '-g'

env.Append(CCFLAGS = libCCFlags)
env.Append(LINKFLAGS = libLNFlags)

cppFiles = glob.glob('src/*.cpp')
cppFiles += ['src/lua/lapi.c',
	'src/lua/lauxlib.c',
	'src/lua/lbaselib.c',
    'src/lua/ldblib.c',
    'src/lua/liolib.c',
    'src/lua/lmathlib.c',
    'src/lua/loslib.c',
    'src/lua/lstrlib.c',
    'src/lua/ltablib.c',
	'src/lua/lcode.c',
	'src/lua/ldebug.c',
	'src/lua/ldo.c',
	'src/lua/ldump.c',
	'src/lua/lfunc.c',
	'src/lua/lgc.c',
	'src/lua/llex.c',
	'src/lua/lmem.c',
	'src/lua/loadlib.c',
	'src/lua/lobject.c',
	'src/lua/lopcodes.c',
	'src/lua/lparser.c',
	'src/lua/lstate.c',
	'src/lua/lstring.c',
	'src/lua/ltable.c',
	'src/lua/ltm.c',
	'src/lua/lua.c',
	'src/lua/lundump.c',
	'src/lua/lvm.c',
	'src/lua/lzio.c'
]


i = 0
for file in cppFiles:
    nfile = file.replace('src','objs')
    cppFiles[i] = nfile
    i += 1

env.Append(CLSLSourceFiles = cppFiles)

env.BuildDir('objs', 'src', duplicate=0)

Export('env')
# linux libraries 
if gPlatform == 'win32':
    Libraries = ['Irrlicht', 'user32', 'gdi32', 'Advapi32']
else:
    if gDebug:
        Libraries = ['pthread','Irrlicht','CLSL_d', 'GL','Xxf86vm','util']
    else:
        Libraries = ['pthread','Irrlicht','CLSL', 'GL','Xxf86vm','util']


library = env.StaticLibrary(libName,cppFiles)
Default(library)

envProgs = Environment(CPPPATH = includePath, MSVS_VERSION='9.0')
envProgs.Append(CCFLAGS = progCCFlags)
envProgs.Append(LINKFLAGS = progLNFlags)

lsltest = envProgs.Program('bin/lsltest','apps/lsltest/main.cpp',
        LIBS=Libraries, LIBPATH=LibPath)
Default(lsltest)

lslcheck = envProgs.Program('bin/lslcheck',['apps/lslcheck/main.cpp',
        'apps/lslcheck/getopt.cpp'],
        LIBS=Libraries, LIBPATH=LibPath)
Default(lslcheck)

