#summary Irrlicht/Blender Exporter v0.1 (Official release will be v0.2)
#labels Featured

= Introduction =
[http://tubras.googlecode.com/svn/trunk/tools/irrb/irrbmodules/irrblend.png]
The Irrlicht/Blender Exporter exports Blender scene and static node data to the native Irrlicht scene (.irr) and mesh (.irrmesh) file formats.

*Features*
 * Blender Scene data is exported to Irrlicht native scene format (.irr).
 * Blender Mesh data is exported to the Irrlicht native mesh format (.irrmesh).
 * Export Blender Logic Properties as Irrlicht scene !UserData.
 * Export Lamp, Mesh, Camera, Sound, and Empty objects.
 * Export Game Engine Materials and corresponding UV data.
 * Export Blender Generated Lightmap/Baked Materials.
 * Export Object Parent/Child relationships and transforms.
 * Specify Textures as two-sided, transparent, and/or using lighting per face.
 * UV Images may optionally be copied to a user specified location and format.
 * Automatic translation between Blender and Irrlicht coordinate systems.
 * Optionally "walk test" your scene immediately after it is exported using Irrlicht.

= Installation =

The latest stable download of *irrb* is accessible from both the "Project" and "Downloads" tabs of this Google Code project. On the "Projects" tab, *irrb* is listed in the "Featured Downloads" section.

The current "*un-released*" version is 0.1 and may be downloaded from here:
   [http://tubras.googlecode.com/files/irrb-0.1.zip irrb-0.1.zip]

The contents of the zip package are:
{{{
 irrb.py
 irrbmodules/iExporter.py
 irrbmodules/iFilename.py
 irrbmodules/iGUI.py
 irrbmodules/iMaterials.py
 irrbmodules/iMesh.py
 irrbmodules/iMeshBuffer.py
 irrbmodules/irrblend.png
 irrbmodules/iScene.py
 irrbmodules/iUtils.py
 irrbmodules/__init__.py
}}}

Unzip the contents of the zip file into either the Blender scripts directory (".blender/scripts") or the user defined scripts directory.  It is important that the "irrbmodules" directory is created as a sub-directory underneath the Blender/User Defined ./scripts directory.

After *irrb* has been installed, either restart Blender or refresh the Scripts menu by selecting "Update Menus" within the Blender scripts menu.

*irrb* should then appear as an option under the Blender Scripts|Export menu:

[http://tubras.googlecode.com/svn/wiki/images/irrbss1.png]

Documentation on installing and configuring "iwalktest" for both Windows and Linux may be found here: *undefined wiki page*


= Before You Start = 

Before you start using the *irrb* you should at the very least have a fundamental understanding of how to use Blender.  

In order to better understand how *irrb* works with Blender, it will help you to look at the relationship between Blenders "Objects" and "!DataBlocks".

You can find a technical explanation here: *[http://www.blender.org/development/architecture/ Blender Architecture]*

In simpler terms, Blender "Objects" (sometimes referred to as Nodes) specify the Position, Rotation, and Scale of the "!DataBlock" the "Object" links to.  You may also have multiple "Objects" link to the same "!DataBlock".  Let's have a closer look.

|| [http://tubras.googlecode.com/svn/wiki/images/irrbss2.png] ||
|| *Image 1* ||

If the entire scene pictured above were to be exported, how many mesh files would be created and how many Irrlicht "nodes" would be written to the "Scene.irr" file?


 # If you answered - 3 mesh files and 3 nodes.  Keep reading.
 # If you answered - 2 mesh files and 3 nodes.  Keep reading.
 # If you answered - it's not possible to tell from the image.  You may skip to the next section.

The reason for not knowing what will be exported is that you must individually select both "cow" objects/nodes to find out if they are linked to the same or different mesh !DataBlocks.

|| [http://tubras.googlecode.com/svn/wiki/images/irrbss2_1.png] ||
|| *Image 2* ||

Selecting the cow on the far left (right click in object mode) and pressing F9 (edit mode window), we can see that this cow object is named "liljim" and it is linked to a mesh !DataBlock named "cow".

Selecting the cow in the middle would display an object named "bigjim" along with a link to a mesh !DataBlock named "cow".

Selecting the pig on the far right would show the pigs object name is "wilbur" and that it is linked to a mesh !DataBlock named "pig".

Now that we know which Objects are linked to which !DataBlocks, we can answer the question posed above - "How many mesh files will be created and how many nodes will be written to the  Scene.irr file?".  The answer is

 * 3 nodes will be written to the Scene.irr file: "liljim", "bigjim", and "wilbur".
 * 2 .irrmesh files will be created: "cow.irrmesh" and "pig.irrmesh".

The reason only a single "cow.irrmesh" is created is that both cow objects are linked to the same mesh !DataBlock.

You may be asking yourself how can both cow objects use the same mesh file?  The cow on the left (liljim) is smaller and facing a different direction than bigjim. To answer that, let's have a look at the partial contents of the generated Scene.irr file (lamp and camera excluded):

{{{
<?xml version="1.0"?>
<!-- Created 03/10/2008 10:45 by irrb v0.2 - "Irrlicht/Blender Exporter" -->
<irr_scene>
   <node type="mesh">
      <attributes>
         <string name="Name" value="liljim" />
         <int name="Id" value="-1" />
         <vector3d name="Position" value="-0.880993, -0.278409, 0.000000" />
         <vector3d name="Rotation" value="0.000000, -80.097466, 0.000000" />
         <vector3d name="Scale" value="0.519058, 0.519058, 0.519058" />
         <bool name="Visible" value="true" />
         <bool name="AutomaticCulling" value="true" />
         <bool name="DebugDataVisible" value="false" />
         <bool name="IsDebugObject" value="false" />
         <string name="Mesh" value="c:\test\meshes\cow.irrmesh" />
         <bool name="ReadOnlyMaterials" value="false" />
      </attributes>
   </node>
   <node type="mesh">
      <attributes>
         <string name="Name" value="bigjim" />
         <int name="Id" value="-1" />
         <vector3d name="Position" value="0.000000, 0.000000, 0.000000" />
         <vector3d name="Rotation" value="0.000000, 0.000000, 0.000000" />
         <vector3d name="Scale" value="1.000000, 1.000000, 1.000000" />
         <bool name="Visible" value="true" />
         <bool name="AutomaticCulling" value="true" />
         <bool name="DebugDataVisible" value="false" />
         <bool name="IsDebugObject" value="false" />
         <string name="Mesh" value="c:\test\meshes\cow.irrmesh" />
         <bool name="ReadOnlyMaterials" value="false" />
      </attributes>
   </node>
   <node type="mesh">
      <attributes>
         <string name="Name" value="wilbur" />
         <int name="Id" value="-1" />
         <vector3d name="Position" value="0.840124, -0.324030, -0.066227" />
         <vector3d name="Rotation" value="-90.000000, 180.000000, -0.000000" />
         <vector3d name="Scale" value="1.000000, 1.000000, 1.000000" />
         <bool name="Visible" value="true" />
         <bool name="AutomaticCulling" value="true" />
         <bool name="DebugDataVisible" value="false" />
         <bool name="IsDebugObject" value="false" />
         <string name="Mesh" value="c:\test\meshes\pig.irrmesh" />
         <bool name="ReadOnlyMaterials" value="false" />
      </attributes>
   </node>
</irr_scene>
}}}

We can see that both the liljim and bigjim nodes reference the same mesh by looking at each nodes "Mesh" attribute:

{{{
         <string name="Mesh" value="c:\test\meshes\cow.irrmesh" />
}}}

So how can liljim be a different size, position, and orientation?  Well, have a look at the "Position", "Rotation", and "Scale" attributes (transform data) for each node in the Scene.irr data.  They are different.  Looking back at Image 2, we can see that Blender's Object "Transform Properties" are exported to the Scene.irr file.  Compare liljim's properties in Image 2, to those that were created in the Scene.irr file.  They are the same, except that Blender's Y and Z axis information have been rearranged for your convenience.

*irrb* honors Blender's Object <-> !DataBlock relationships. This may cause unexpected results especially when exporting Meshes only.  More on this later.


= irrb Usage =

todo: document using the irrb...

[http://tubras.googlecode.com/svn/wiki/images/irrbss3.png]
[http://tubras.googlecode.com/svn/wiki/images/irrbss4.png]

(starting the exporter)

(setting up output locations)

(texture copying)

(texture options & Irrlicht materials)

(object/data block naming linux/windows)

(irrb status display)

(iwalktest integration and usage)

(lightmap & texture baking)

(texture tiling)

(cameras & lights)

(sounds)

(setting up UserData properties)

(tubras specific options)

(demo video)

(exporter options reference)

= tips, tricks, and samples = 

= FAQ =

todo: irrb faq

*Q*: Who are you?, Why are you here?

*A*: 
----
*Q*: Can I export animated meshes?

*A*: 
----
*Q*: I have a question, where do I go?

*A*:
----
*Q*: Where can I report bugs?

*A*:
----
*Q*: Where can I submit a patch?

*A*: 