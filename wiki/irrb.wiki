#summary Irrlicht/Blender Exporter v0.1 (Official release will be beta v0.2)
#labels Featured

= Introduction =
[http://tubras.googlecode.com/svn/trunk/tools/irrb/irrbmodules/irrblend.png]
The Irrlicht/Blender Exporter exports Blender scene and static node data to the native Irrlicht scene (.irr) and mesh (.irrmesh) file formats.

*Features*
 * Blender Scene data is exported to Irrlicht native scene format (.irr).
 * Blender Mesh data is exported to the Irrlicht native mesh format (.irrmesh).
 * Export Blender Logic Properties as Irrlicht scene !UserData.
 * Export Lamp, Mesh, Camera, Sound, and Empty objects.
 * Export Game Engine Materials and corresponding UV data.
 * Export Blender Generated Lightmap/Baked Materials.
 * Export Object Parent/Child relationships and transforms.
 * Specify Textures as two-sided, transparent, and/or using lighting per face.
 * UV Images may optionally be copied to a user specified location and format.
 * Automatic translation between Blender and Irrlicht coordinate systems.
 * Optionally "walk test" your scene immediately after it is exported using Irrlicht.

= Installation =

The latest stable download of *irrb* is accessible from both the "Project" and "Downloads" tabs of this Google Code project. On the "Projects" tab, *irrb* is listed in the "Featured Downloads" section.

The current "*un-released pre-alpha*" version is 0.1 and may be downloaded from here:
   [http://tubras.googlecode.com/files/irrb-0.1.zip irrb-0.1.zip]

The contents of the zip package are:
{{{
 irrb.py
 irrbmodules/iExporter.py
 irrbmodules/iFilename.py
 irrbmodules/iGUI.py
 irrbmodules/iMaterials.py
 irrbmodules/iMesh.py
 irrbmodules/iMeshBuffer.py
 irrbmodules/irrblend.png
 irrbmodules/iScene.py
 irrbmodules/iUtils.py
 irrbmodules/__init__.py
}}}

Unzip the contents of the zip file into either the Blender scripts directory (".blender/scripts") or the user defined scripts directory.  It is important that the "irrbmodules" directory is created as a sub-directory underneath the Blender/User Defined ./scripts directory.

After *irrb* has been installed, either restart Blender or refresh the Scripts menu by selecting "Update Menus" within the Blender scripts menu.

*irrb* should then appear as an option under the Blender Scripts|Export menu:

[http://tubras.googlecode.com/svn/wiki/images/irrbss1.png]

Documentation on installing and configuring "iwalktest" for both Windows and Linux may be found here: *undefined wiki page*


= Before You Start = 

Before you start using the *irrb* you should at the very least have a fundamental understanding of how to use Blender.  

In order to better understand how *irrb* works with Blender, it will help you to look at the relationship between Blenders "Objects" and "!DataBlocks".

You can find a technical explanation here: *[http://www.blender.org/development/architecture/ Blender Architecture]*

In simpler terms, Blender "Objects" (sometimes referred to as Nodes) specify the Position, Rotation, and Scale of the "!DataBlock" the "Object" links to.  You may also have multiple "Objects" link to the same "!DataBlock".  Let's have a closer look.

|| [http://tubras.googlecode.com/svn/wiki/images/irrbss2.png] ||
|| *Image 1.* - liljim, bigjim, and wilbur. ||

If the entire scene pictured above were to be exported, how many mesh files would be created and how many Irrlicht "nodes" would be written to the "Scene.irr" file?


 # If you answered - 3 mesh files and 3 nodes.  Keep reading.
 # If you answered - 2 mesh files and 3 nodes.  Keep reading.
 # If you answered - it's not possible to tell from the image.  You may skip to the next section.

The reason for not knowing what will be exported is that you must individually select both "cow" objects/nodes to find out if they are linked to the same or different mesh !DataBlocks.

|| [http://tubras.googlecode.com/svn/wiki/images/irrbss2_1.png] ||
|| *Image 2.* - object and mesh datablock links.||

Selecting the cow on the far left (right click in object mode) and pressing F9 (edit mode window), we can see that this cow object is named "liljim" (OB:liljim) and it is linked to a mesh !DataBlock named "cow" (ME:cow).

Selecting the cow in the middle would display an object named "bigjim" along with a link to a mesh !DataBlock named "cow".

Selecting the pig on the far right would show the pigs object name is "wilbur" and that it is linked to a mesh !DataBlock named "pig".

Now that we know which Objects are linked to which !DataBlocks, we can answer the question posed above - "How many mesh files will be created and how many nodes will be written to the  Scene.irr file?".  The answer is

 * 3 nodes will be written to the Scene.irr file: "liljim", "bigjim", and "wilbur".
 * 2 .irrmesh files will be created: "cow.irrmesh" and "pig.irrmesh".

The reason only a single "cow.irrmesh" is created is that both cow objects are linked to the same mesh !DataBlock.

You may be asking yourself how can both cow objects use the same mesh file?  The cow on the left (liljim) is smaller and facing a different direction than bigjim. To answer that, let's have a look at the partial contents of the generated Scene.irr file (lamp and camera excluded):

{{{
<?xml version="1.0"?>
<!-- Created 03/10/2008 10:45 by irrb v0.2 - "Irrlicht/Blender Exporter" -->
<irr_scene>
   <node type="mesh">
      <attributes>
         <string name="Name" value="liljim" />
         <int name="Id" value="-1" />
         <vector3d name="Position" value="-0.880993, -0.278409, 0.000000" />
         <vector3d name="Rotation" value="0.000000, -80.097466, 0.000000" />
         <vector3d name="Scale" value="0.519058, 0.519058, 0.519058" />
         <bool name="Visible" value="true" />
         <bool name="AutomaticCulling" value="true" />
         <bool name="DebugDataVisible" value="false" />
         <bool name="IsDebugObject" value="false" />
         <string name="Mesh" value="c:\test\meshes\cow.irrmesh" />
         <bool name="ReadOnlyMaterials" value="false" />
      </attributes>
   </node>
   <node type="mesh">
      <attributes>
         <string name="Name" value="bigjim" />
         <int name="Id" value="-1" />
         <vector3d name="Position" value="0.000000, 0.000000, 0.000000" />
         <vector3d name="Rotation" value="0.000000, 0.000000, 0.000000" />
         <vector3d name="Scale" value="1.000000, 1.000000, 1.000000" />
         <bool name="Visible" value="true" />
         <bool name="AutomaticCulling" value="true" />
         <bool name="DebugDataVisible" value="false" />
         <bool name="IsDebugObject" value="false" />
         <string name="Mesh" value="c:\test\meshes\cow.irrmesh" />
         <bool name="ReadOnlyMaterials" value="false" />
      </attributes>
   </node>
   <node type="mesh">
      <attributes>
         <string name="Name" value="wilbur" />
         <int name="Id" value="-1" />
         <vector3d name="Position" value="0.840124, -0.324030, -0.066227" />
         <vector3d name="Rotation" value="-90.000000, 180.000000, -0.000000" />
         <vector3d name="Scale" value="1.000000, 1.000000, 1.000000" />
         <bool name="Visible" value="true" />
         <bool name="AutomaticCulling" value="true" />
         <bool name="DebugDataVisible" value="false" />
         <bool name="IsDebugObject" value="false" />
         <string name="Mesh" value="c:\test\meshes\pig.irrmesh" />
         <bool name="ReadOnlyMaterials" value="false" />
      </attributes>
   </node>
</irr_scene>
}}}

We can see that both the liljim and bigjim nodes reference the same mesh by looking at each nodes "Mesh" attribute:

{{{
         <string name="Mesh" value="c:\test\meshes\cow.irrmesh" />
}}}

So how can liljim be a different size, position, and orientation?  Well, have a look at the "Position", "Rotation", and "Scale" attributes (transform data) for each node in the Scene.irr data.  They are different.  Looking back at Image 2, we can see that Blender's Object "Transform Properties" are exported to the Scene.irr file.  Compare liljim's properties in Image 2, to those that were created in the Scene.irr file.  They are the same, except that Blender's Y and Z axis information have been rearranged for your convenience.

*irrb* honors Blender's Object <-> !DataBlock relationships. This may cause unexpected results especially when exporting Meshes only.  More on this later.

----

= irrb Usage =

== Starting The Exporter ==

The easiest and quickest way to call up *irrb* is to select it from the menu: File | Exporters | Irrlicht.  Using this method will typically cause the *irrb* interface to overlay the active window possibly hiding your 3D view.

If you repeatedly export and examine your scene using *iwalktest*, you may find it convenient to run the exporter in "split" screen mode:

|| [http://tubras.googlecode.com/svn/wiki/images/irrbss5.png] ||
|| *Image 3.* - Split Screen View. ||

Steps to create a split screen with *irrb* in the right half of the Blender window:

 # Right click the top border of the 3D view window.
 # Select the "Split Area" menu option.
 # Move the divider to the middle of the 3D view and left click to anchor it.
 # Select "Scripts Window" for the window type (lower left corner of the right half of the screen).
 # In the "Scripts" menu, select "Export" and then "Irrlicht".

First time *irrb* users will see Image 4 with the default options:

|| [http://tubras.googlecode.com/svn/wiki/images/irrbss3.png] ||
|| *Image 4.* - Default Options. ||
For Windows users, the default Mesh Directory is "c:\temp\" and on Linux the default Mesh Directory will be "/tmp/".

*irrb* stores your preferences and directory locations in a configuration file so your favorite options are remembered between Blender sessions.

Let's take a quick look at all of the *irrb* options:

|| [http://tubras.googlecode.com/svn/wiki/images/irrbss4.png] ||
|| *Image 5.* - *irrb* Options. ||

_note that light/dark green buttons are "toggle" buttons._

*Mesh Directory* - This is the directory location that all exported ".irrmesh" files will be saved to.

*Selected Meshes Only* - This toggle button will export the meshes that you have selected in the current scene.  When un-selected, all nodes and linked meshes will be exported.

*Create Scene File* - Toggle button used to control whether or not a ".irr" scene file is generated.  If selected, scene related options will appear.

*Lights* - Toggle button to indicate whether or not to write light objects/nodes to the ".irr" scene file.

*Cameras* - Toggle button to indicate whether or not to write camera objects/nodes to the ".irr" scene file.

*Scene Directory* - This is the directory location that the ".irr" scene file will be saved to.  The name of the scene file is built using the current Blender scene name that is being exported.  For example, if you named your scene "barnyard", the scene file that is created will be named "barnyard.irr".

*Mesh Path* - This is the relative or absolute path to use when creating the Mesh attribute for Mesh nodes in the ".irr" scene file.  More information on how to use this can be found in the "Settup Up Output Locations" section.

*Copy Textures* - Toggle button that indicates whether or not to copy texture images to a specific location. This option is particularly useful when baking procedural textures onto UV mapped images that are packed into your .blend file.  In other words the images don't exist as individual files on disk.  More information on copying textures can be found in the "Texture Copying" section.

*TGA, PNG, BMP* - Mutually exclusive toggle buttons used to indicate what format to save copied images in.  Why no JPG option? To save you from yourself. 

*Texture Directory* - This is the directory location that copied textures will be saved to.

*Texture Path* - This is the relative or absolute path to use when creating the Texture attribute in the associated ".irrmesh" mesh file.

*Walk Test* - Toggle button that will appear if you have *iwalktest* installed on your system. When selected, iwalktest is executed with your exported scene file as parameter.

*Re-Test* - Button that re-runs *iwalktest* with the last scene exported.

*Export* - Makes the magic happen.

*Exit* - Exits the *irrb* export script.

----
== Setting Up Output Locations ==

Before you export a Blender scene, you will need to set up the locations of where your output (scene, mesh, and texture files) will be written to.

If you are simply exporting a mesh that will be loaded into your Irrlicht application or imported by *irrEdit*, you only have to concern yourself with the "Mesh Directory" option.  The path entered into the "Mesh Directory" edit field will be the location where all of your ".irrmesh" files are written to.

Note that *irrb* automatically adjusts your path separator dependent on the operating system you are using.

On the other hand, if you are generating a scene file (.irr) that will be loaded by your Irrlicht application or opened and manipulated by *irrEdit*, you will need to do a little planning.

Each Mesh node entry in an exported scene file contains a "Mesh" attribute.  This attribute is used to link in the actual Mesh data (.irrmesh file) that will be associated with the node.

{{{
         <string name="Mesh" value="c:\test\meshes\cow.irrmesh" />
}}}

There are three options that may be used when generating the Mesh value (*irrb* "Mesh Path" Field):

{{{
         <!-- File Name Only -->
         <string name="Mesh" value="cow.irrmesh" />
}}}
*File Name Only* - Set "Mesh Path" equal to "$filename". In order for the Irrlicht scene loader to actually load a mesh using a file name only, the mesh file must either be in the directory the application is executing from or the mesh must be located on a previously defined *[http://irrlicht.sourceforge.net/docu/classirr_1_1io_1_1_i_file_system.html IFileSystem]* path.
{{{
         <!-- Explicit/Full Path -->
         <string name="Mesh" value="/test/meshes/cow.irrmesh" />
}}}
*Explicit/Full Path* - Set "Mesh Path" equal to "$fullpath" or leave it blank. The Irrlicht scene loader will load the mesh using the full path and mesh file name.  Windows users may include a drive letter at the beginning of the path: "c:/test/meshes/" (still use forward slashes).
{{{
         <!-- Relative Path -->
         <string name="Mesh" value="data/mdl/cow.irrmesh" />
}}}
*Relative Path* - Set "Mesh Path" equal to the relative path you wish to use.  This mode operates in a manner similar to the "Filename Only" mode in that the path must be relative to either the directory the application is executing from or relative to a path that has been previously defined by *[http://irrlicht.sourceforge.net/docu/classirr_1_1io_1_1_i_file_system.html IFileSystem]*.


If you decide to copy your textures, these same "output path" rules apply to the "Texture Path" option in the exporter.

*iwalktest* can be very useful for determining why a mesh isn't appearing in a scene and/or why a texture isn't appearing properly.  The first question to ask yourself: "Is the mesh/texture being loaded?".  *iwalktest* will log mesh/texture loading errors to its log file "iwalktest.log" which is located in the same directory as *iwalktest*.  Windows users can also check for load errors in the *iwalktest* console window if it is configured to be displayed (default).

----
== Texture Copying ==

Why copy textures?  Convenience.

 # You may be working with a .blend file which contains "packed" images.
 # You may not want your Irrlicht application to work against your original texture directory.
 # Your scene may use several procedurally generated textures.

*Packed Images* - 

Blender allows you to "pack" texture images.  This means the images are stored in the .blend file.  Images that are stored in the .blend file will NOT be accessible to the application that is loading an exported mesh file.

Why pack images then?  As mentioned above - convenience.  Especially if you exchange .blend files with someone else working on a scene/mesh.

UV images created within Blender itself are *lost* if you don't manually save them to disk. Saving the .blend file does not automatically save newly created images.

Regardless of the image source (externally opened or created within Blender), you can *pack* and *unpack* an image by clicking on the *packing icon*:

_PackingIconsScreenShot_

 # *Left* icon indicates the current image *is NOT packed*.
 # *Middle* icon indicates the current image *is packed*.
 # *Right* icon indicates the current image *needs to be re-packed*.  Simply click the packing icon to re-pack the image.

Images will only need to be re-packed if the original image was previously *packed* and then the image is later modified via baking or texture painting.

If you choose to NOT copy textures then you are responsible for making sure Blender generated images are saved to disk.  If you forget, *irrb* will display an error message and abort the export.

Regardless as to whether or not you copy textures, you still need to properly set up the "Texture Path" *irrb* option.

Each mesh buffer material located in an .irrmesh file contains four "Texture" attributes (Texture1, Texture2, etc.).  These attributes are used to link in the actual image file(s) that will be associated with the material and mesh buffer.

{{{
         <texture name="Texture1" value="/test/images/cowuvmap.tga"/>
}}}

There are three options that may be used when generating the Texture value (*irrb* "Texture Path" Field):

{{{
         <!-- File Name Only -->
         <texture name="Texture1" value="cowuvmap.tga"/>
}}}
*File Name Only* - Set "Texture Path" equal to "$filename". In order for the Irrlicht scene loader to actually load an image using a file name only, the image file must either be in the directory the application is executing from or the image must be located on a previously defined *[http://irrlicht.sourceforge.net/docu/classirr_1_1io_1_1_i_file_system.html IFileSystem]* path.
{{{
         <!-- Explicit/Full Path -->
         <texture name="Texture1" value="/test/images/cowuvmap.tga"/>
}}}
*Explicit/Full Path* - Set "Texture Path" equal to "$fullpath" or leave it blank. The Irrlicht scene loader will load the image using the full path and image file name.  Windows users may include a drive letter at the beginning of the path: "c:/test/images/" (still use forward slashes).
{{{
         <!-- Relative Path -->
         <string name="Mesh" value="data/tex/cowuvmap.tga" />
}}}
*Relative Path* - Set "Texture Path" equal to the relative path you wish to use.  This mode operates in a manner similar to the "Filename Only" mode in that the path must be relative to either the directory the application is executing from or relative to a path that has been previously defined by *[http://irrlicht.sourceforge.net/docu/classirr_1_1io_1_1_i_file_system.html IFileSystem]*.


----
== Irrlicht Material Generation ==

*irrb* generates Irrlicht materials based on the Blender UV layer names that you assign.  

The scheme used to map UV layer names to Irrlicht materials is directly related to the *"sBuiltInMaterialTypeNames"* array which can be found in [http://irrlicht.sourceforge.net/docu/_e_material_types_8h.html "ematerialtypes.h".]

For example, to generate an *EMT_TRANSPARENT_ALPHA_CHANNEL* (enum) type material, you would create a Blender UV layer and name it "*trans_alphach*".  The actual image assigned to this UV layer will need to contain an alpha channel.

Another example would be to generate an *EMT_LIGHTMAP* (enum) texture.  For this to work, you will need two UV layers defined in Blender.  One of them will need to be named "*lightmap*" and the other "*diffuse*".  *irrb* will then properly create a "lightmap" material and assign the UV image associated with "diffuse" UV layer to the "Texture1" attribute.  The UV image associated with the "lightmap" UV layer will be assigned to the "Texture2" attribute in the material definition.

For Irrlicht materials that *require* more than one texture/image, the second image should be assigned the name "diffuse" in Blender.  The following describes how *irrb* works when the Blender "diffuse" UV layer name does NOT exist and the Irrlicht material requires two images.

 # Only one Blender UV Layer exists.  Material is set to "solid" and a warning is displayed.
 # Two Blender UV Layer's exist.  The "diffuse" texture is taken from the UV layer that doesn't define the Irrlicht material type.
 # Three or more UV Layer's exist. The "diffuse" texture is taken from the 1st UV layer (top down search) that doesn't define the Irrlicht material type.  A warning is displayed.

In the absence of any UV layers, *irrb* creates a "solid" material without any texture attributes.  The vertex colors are assigned to the diffuse color assigned to the mesh's Blender material.  If a Blender material hasn't been assigned, then the Irrlicht vertex color is set to the default white - RGBA: 255,255,255,255.

=== Primary and Secondary UV Layers ===

The *Primary* UV layer is the Blender UV layer which matches the Irrlicht material name (case-insensitive).  It's position in the Blender UV layer stack is irrelevant. 

The *Secondary* UV layer is the Blender UV layer that you name "diffuse".  If a "diffuse" UV layer doesn't exist, *irrb* sets the secondary UV layer as follows:

 # If the "active" Blender UV layer is NOT equal to the primary UV layer. Set the secondary UV layer to the active Blender UV layer.
 # Search through the Blender UV layers and set the secondary layer to the first layer that is not equal to the primary layer.

Primary doesn't necessarily map to the first texture attribute and UV coordinate.  For example, given two Blender UV layers named "!Lightmap_M4" and "diffuse" (again order doesn't matter), the follow Irrlicht material attributes will be defined as follows:

 # Texture1 will be set to the image assigned to the UV layer named "diffuse".
 # Texture2 will be set to the image assigned to the UV layer named "!Lightmap_M4".

When generating the vertex definitions for this particular mesh buffer, UV coordinate 1 will be assigned to the UV coordinate defined by the UV layer named "diffuse" and UV coordinate 2 will be assigned to the UV coordinate defined by the UV layer named "!Lightmap_M4".



----

(irrb status display)

(iwalktest integration and usage)

(lightmap & texture baking)

(texture tiling)

(cameras & lights)

(sounds)

(setting up UserData properties)

(object/data block naming linux/windows)

(tubras specific options)

(demo video)

(exporter options reference)

(tips, tricks, and samples)
----
= FAQ =

*Q*: I have a question, where do I go?

*A*: Did you read all of this wiki? Read it again.  Still have a question? You may post your question here _UndefinedLink_.  If you post a question that is answered in this wiki, prep yourself for abuse, the likes of which only your step-mother has dreamed about - _all your abuse are belong to us_.

Properly address your question as *[http://www.tubras.com/files/el_conquistador.mp3 "Dear El Conquistador,"]*.
----
*Q*: Can I export animated meshes?

*A*: *Not Yet*.  The .irrmesh file format currently doesn't support animation.
----
*Q*: Can *irrb* invoke my own application instead of *iwalktest* after exporting?

*A*: *Yes.*  See the section "iwalktest Integration And Usage"
----
*Q*: Where can I report bugs?

*A*:
----
*Q*: Where can I submit a patch?

*A*: 
----
*Q*: Who are you?, Why are you here?

*A*: 
----