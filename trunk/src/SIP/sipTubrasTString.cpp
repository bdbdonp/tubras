/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.6 (4.6) on Sat Apr 14 23:44:11 2007
 */
#line 13 "Tubras.sip"
	#include "tubras.h"
#line 9 "sipTubrasTString.cpp"

#include "sipAPITubras.h"
#include "sipTubrasTString.h"


/* Call the mapped type's destructor. */
extern "C" {static void release_TString(void *, int);}
static void release_TString(void *ptr, int)
{
    delete reinterpret_cast<TString *>(ptr);
}



extern "C" {static int convertTo_TString(PyObject *, void **, int *, PyObject *);}
static int convertTo_TString(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *)
{
    TString **sipCppPtr = reinterpret_cast<TString **>(sipCppPtrV);

#line 31 "Tubras.sip"
         // Allow a Python string whenever a string is expected.
         if (sipIsErr == NULL)
             return PyString_Check(sipPy);
         if (sipPy == Py_None) {
             *sipCppPtr = NULL;
             return 0;
         }
         if (PyString_Check(sipPy)) {
             *sipCppPtr = new TString(PyString_AS_STRING(sipPy));
             return 0;
         }
         *sipCppPtr = new TString("");
         return 1;
#line 43 "sipTubrasTString.cpp"
}


extern "C" {static void *forceConvertTo_TString(PyObject *, int *);}
static void *forceConvertTo_TString(PyObject *valobj,int *iserrp)
{
    if (*iserrp || valobj == NULL)
        return NULL;

    if (convertTo_TString(valobj,NULL,NULL,NULL))
    {
        void *val;

        /*
         * Note that we throw away the flag that says if the value
         * has just been created on the heap or not.
         */
        convertTo_TString(valobj,&val,iserrp,NULL);

        return val;
    }

    sipBadClass("TString");

    *iserrp = 1;

    return NULL;
}


extern "C" {static PyObject *convertFrom_TString(void *, PyObject *);}
static PyObject *convertFrom_TString(void *sipCppV,PyObject *)
{
   TString *sipCpp = reinterpret_cast<TString *>(sipCppV);

#line 26 "Tubras.sip"
     const char *s = sipCpp->c_str();
     return PyString_FromString(s);
#line 82 "sipTubrasTString.cpp"
}


sipMappedType sipMappedTypeDef_TString = {
    "TString",
    release_TString,
    forceConvertTo_TString,
    convertTo_TString,
    convertFrom_TString
};
