/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.6 (4.6) on Sat Apr 14 23:44:11 2007
 */
#line 13 "Tubras.sip"
	#include "tubras.h"
#line 9 "sipTubrasTApplication.cpp"

#include "sipAPITubras.h"
#include "sipTubrasTApplication.h"

#include "sipTubrasTApplication.h"
#include "sipTubrasTConfigFile.h"



extern "C" {static PyObject *meth_TApplication_initialize(PyObject *, PyObject *);}
static PyObject *meth_TApplication_initialize(PyObject *sipSelf,PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        TApplication *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipClass_TApplication,&sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->initialize();

            return PyInt_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipNm_Tubras_TApplication,sipNm_Tubras_initialize);

    return NULL;
}


extern "C" {static PyObject *meth_TApplication_run(PyObject *, PyObject *);}
static PyObject *meth_TApplication_run(PyObject *sipSelf,PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        TApplication *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipClass_TApplication,&sipCpp))
        {
            sipCpp->run();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipNm_Tubras_TApplication,sipNm_Tubras_run);

    return NULL;
}


extern "C" {static PyObject *meth_TApplication_setGUICursorVisible(PyObject *, PyObject *);}
static PyObject *meth_TApplication_setGUICursorVisible(PyObject *sipSelf,PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        bool a0;
        TApplication *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bb",&sipSelf,sipClass_TApplication,&sipCpp,&a0))
        {
            sipCpp->setGUICursorVisible(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipNm_Tubras_TApplication,sipNm_Tubras_setGUICursorVisible);

    return NULL;
}


extern "C" {static PyObject *meth_TApplication_getConfigFile(PyObject *, PyObject *);}
static PyObject *meth_TApplication_getConfigFile(PyObject *sipSelf,PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        TApplication *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipClass_TApplication,&sipCpp))
        {
            TConfigFile *sipRes;

            sipRes = sipCpp->getConfigFile();

            return sipConvertFromInstance(sipRes,sipClass_TConfigFile,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipNm_Tubras_TApplication,sipNm_Tubras_getConfigFile);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_TApplication(void *, sipWrapperType *);}
static void *cast_TApplication(void *ptr,sipWrapperType *targetClass)
{
    if (targetClass == sipClass_TApplication)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_TApplication(void *, int);}
static void release_TApplication(void *ptr,int)
{
    delete reinterpret_cast<TApplication *>(ptr);
}


extern "C" {static void dealloc_TApplication(sipWrapper *);}
static void dealloc_TApplication(sipWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_TApplication(sipSelf->u.cppPtr,0);
    }
}


extern "C" {static void *init_TApplication(sipWrapper *, PyObject *, sipWrapper **, int *);}
static void *init_TApplication(sipWrapper *,PyObject *sipArgs,sipWrapper **,int *sipArgsParsed)
{
    TApplication *sipCpp = 0;

    if (!sipCpp)
    {
        int a0;
        void * a1;
        char * a2 = "Tubras App";

        if (sipParseArgs(sipArgsParsed,sipArgs,"iv|s",&a0,&a1,&a2))
        {
#line 87 "Tubras.sip"
            sipCpp = new TApplication(a0,(char**)a1,a2);
#line 162 "sipTubrasTApplication.cpp"
        }
    }

    if (!sipCpp)
    {
        const TApplication * a0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"JA",sipClass_TApplication,&a0))
        {
            sipCpp = new TApplication(*a0);
        }
    }

    return sipCpp;
}


extern "C" {static void *forceConvertTo_TApplication(PyObject *, int *);}
static void *forceConvertTo_TApplication(PyObject *valobj,int *iserrp)
{
    if (*iserrp || valobj == NULL)
        return NULL;

    if (valobj == Py_None || sipIsSubClassInstance(valobj,sipClass_TApplication))
        return sipConvertToCpp(valobj,sipClass_TApplication,iserrp);

    sipBadClass(sipNm_Tubras_TApplication);

    *iserrp = 1;

    return NULL;
}


static PyMethodDef methods_TApplication[] = {
    {sipNm_Tubras_getConfigFile, meth_TApplication_getConfigFile, METH_VARARGS, NULL},
    {sipNm_Tubras_initialize, meth_TApplication_initialize, METH_VARARGS, NULL},
    {sipNm_Tubras_run, meth_TApplication_run, METH_VARARGS, NULL},
    {sipNm_Tubras_setGUICursorVisible, meth_TApplication_setGUICursorVisible, METH_VARARGS, NULL}
};


sipTypeDef sipType_Tubras_TApplication = {
    0,
    0,
    "Tubras.TApplication",
    0,
    {0, 0, 1},
    0,
    0,
    4, methods_TApplication,
    0, 0,
    0,
    init_TApplication,
    0,
    0,
    0,
    0,
    0,
    0,
    dealloc_TApplication,
    cast_TApplication,
    release_TApplication,
    forceConvertTo_TApplication,
    0,
    0,
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    0
};
