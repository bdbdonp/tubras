/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.6 (4.6) on Sat Apr 14 23:44:11 2007
 */
#line 13 "Tubras.sip"
	#include "tubras.h"
#line 9 "sipTubrasTConfigFile.cpp"

#include "sipAPITubras.h"
#include "sipTubrasTConfigFile.h"

#include "sipTubrasTConfigFile.h"
#include "sipTubrasTString.h"



extern "C" {static PyObject *meth_TConfigFile_getSetting(PyObject *, PyObject *);}
static PyObject *meth_TConfigFile_getSetting(PyObject *sipSelf,PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        TString * a0;
        int a0State = 0;
        TString a1def = "";
        TString * a1 = &a1def;
        int a1State = 0;
        TConfigFile *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BM1|M1",&sipSelf,sipClass_TConfigFile,&sipCpp,sipMappedType_TString,&a0,&a0State,sipMappedType_TString,&a1,&a1State))
        {
            TString *sipRes;

            sipRes = new TString(sipCpp->getSetting(*a0,*a1));

            sipReleaseMappedType(a0,sipMappedType_TString,a0State);
            sipReleaseMappedType(a1,sipMappedType_TString,a1State);

            PyObject *sipResObj = sipConvertFromMappedType(sipRes,sipMappedType_TString,NULL);
            delete sipRes;

            return sipResObj;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipNm_Tubras_TConfigFile,sipNm_Tubras_getSetting);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_TConfigFile(void *, sipWrapperType *);}
static void *cast_TConfigFile(void *ptr,sipWrapperType *targetClass)
{
    if (targetClass == sipClass_TConfigFile)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_TConfigFile(void *, int);}
static void release_TConfigFile(void *ptr,int)
{
    delete reinterpret_cast<TConfigFile *>(ptr);
}


extern "C" {static void dealloc_TConfigFile(sipWrapper *);}
static void dealloc_TConfigFile(sipWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_TConfigFile(sipSelf->u.cppPtr,0);
    }
}


extern "C" {static void *init_TConfigFile(sipWrapper *, PyObject *, sipWrapper **, int *);}
static void *init_TConfigFile(sipWrapper *,PyObject *sipArgs,sipWrapper **,int *sipArgsParsed)
{
    TConfigFile *sipCpp = 0;

    if (!sipCpp)
    {
        if (sipParseArgs(sipArgsParsed,sipArgs,""))
        {
            sipCpp = new TConfigFile();
        }
    }

    if (!sipCpp)
    {
        const TConfigFile * a0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"JA",sipClass_TConfigFile,&a0))
        {
            sipCpp = new TConfigFile(*a0);
        }
    }

    return sipCpp;
}


extern "C" {static void *forceConvertTo_TConfigFile(PyObject *, int *);}
static void *forceConvertTo_TConfigFile(PyObject *valobj,int *iserrp)
{
    if (*iserrp || valobj == NULL)
        return NULL;

    if (valobj == Py_None || sipIsSubClassInstance(valobj,sipClass_TConfigFile))
        return sipConvertToCpp(valobj,sipClass_TConfigFile,iserrp);

    sipBadClass(sipNm_Tubras_TConfigFile);

    *iserrp = 1;

    return NULL;
}


static PyMethodDef methods_TConfigFile[] = {
    {sipNm_Tubras_getSetting, meth_TConfigFile_getSetting, METH_VARARGS, NULL}
};


sipTypeDef sipType_Tubras_TConfigFile = {
    0,
    0,
    "Tubras.TConfigFile",
    0,
    {0, 0, 1},
    0,
    0,
    1, methods_TConfigFile,
    0, 0,
    0,
    init_TConfigFile,
    0,
    0,
    0,
    0,
    0,
    0,
    dealloc_TConfigFile,
    cast_TConfigFile,
    release_TConfigFile,
    forceConvertTo_TConfigFile,
    0,
    0,
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    0
};
