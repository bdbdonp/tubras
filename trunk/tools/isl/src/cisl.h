#ifndef _CISL_H_
#define _CISL_H_

#include "islLexer.h"
#include "islParser.h"
#include "irrlicht.h"

namespace CISL {

    class CISLErrorHandler 
    {
    public:
        virtual int handleError(int line, int code, irr::core::stringc errMessage)
        {
            printf("CISL Error (%d), line: %d, message: %s\n",code, line, errMessage.c_str());
            return 0;
        }
    };

    class CISL 
    {
    protected:
        pANTLR3_UINT8           m_fileName;
        pANTLR3_INPUT_STREAM    m_inputStream;

        pislLexer               m_lexer;

        // The token stream is produced by the ANTLR3 generated lexer. Again it is a structure based
        // API/Object, which you can customise and override methods of as you wish. a Token stream is
        // supplied to the generated parser, and you can write your own token stream and pass this in
        // if you wish.
        //
        pANTLR3_COMMON_TOKEN_STREAM        m_tokenStream;

        // The Lang parser is also generated by ANTLR and accepts a token stream as explained
        // above. The token stream can be any source in fact, so long as it implements the 
        // ANTLR3_TOKEN_SOURCE interface. In this case the parser does not return anything
        // but it can of course specify any kind of return type from the rule you invoke
        // when calling it. This is the ctx (CTX macro) pointer for your parser.
        //
        pislParser                m_parser;

        // The parser produces an AST, which is returned as a member of the return type of
        // the starting rule (any rule can start first of course). This is a generated type
        // based upon the rule we start with.
        //
        islParser_script_return     m_islAST;


        // The tree nodes are managed by a tree adaptor, which doles
        // out the nodes upon request. You can make your own tree types and adaptors
        // and override the built in versions. See runtime source for details and
        // eventually the wiki entry for the C target.
        //
        pANTLR3_COMMON_TREE_NODE_STREAM    m_treeNodes;

    protected:
        virtual void freeResources();
        void dumpTree(pANTLR3_BASE_TREE tree);


    public:
        CISL();
        virtual ~CISL();

        int validateScript(const irr::core::stringc fileName, const CISLErrorHandler& errorHandler=CISLErrorHandler());
        int processScript(const irr::core::stringc fileName, const CISLErrorHandler& errorHandler=CISLErrorHandler());

        const irr::video::SMaterial* getMaterial(const irr::core::stringc materialName);
        const irr::video::SColor* getColor(const irr::core::stringc colorName);
        float getFloat(const irr::core::stringc varName);
        int getInt(const irr::core::stringc varName);
        const irr::core::stringc getString(const irr::core::stringc varName);
        const void* getList(const irr::core::stringc varName);

    };
}

#endif