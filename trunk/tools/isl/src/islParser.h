/** \file
 *  This C header file was generated by $ANTLR version 3.1.1
 *
 *     -  From the grammar source file : C:\\gdev\\iTubras\\tools\\isl\\grammar\\isl.g
 *     -                            On : 2008-10-09 11:25:55
 *     -                for the parser : islParserParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser islParser has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 * 
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pislParser, which is returned from a call to islParserNew().
 *
 * The methods in pislParser are  as follows:
 *
 *  - islParser_script_return      pislParser->script(pislParser)
 *  - islParser_statements_return      pislParser->statements(pislParser)
 *  - islParser_classdef_return      pislParser->classdef(pislParser)
 *  - islParser_classType_return      pislParser->classType(pislParser)
 *  - islParser_classColor_return      pislParser->classColor(pislParser)
 *  - islParser_classMaterial_return      pislParser->classMaterial(pislParser)
 *  - islParser_classPass_return      pislParser->classPass(pislParser)
 *  - islParser_cstatements_return      pislParser->cstatements(pislParser)
 *  - islParser_assignment_return      pislParser->assignment(pislParser)
 *  - islParser_expr_return      pislParser->expr(pislParser)
 *  - islParser_addsubexpr_return      pislParser->addsubexpr(pislParser)
 *  - islParser_muldivexpr_return      pislParser->muldivexpr(pislParser)
 *  - islParser_atom_return      pislParser->atom(pislParser)
 *  - islParser_list_or_expr_return      pislParser->list_or_expr(pislParser)
 *  - islParser_id_return      pislParser->id(pislParser)
 *  - islParser_idinherit_return      pislParser->idinherit(pislParser)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
#ifndef	_islParser_H
#define _islParser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */
 
#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct islParser_Ctx_struct islParser, * pislParser;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule 
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#endif
typedef struct islParser_script_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    islParser_script_return;

typedef struct islParser_statements_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    islParser_statements_return;

typedef struct islParser_classdef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    islParser_classdef_return;

typedef struct islParser_classType_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    islParser_classType_return;

typedef struct islParser_classColor_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    islParser_classColor_return;

typedef struct islParser_classMaterial_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    islParser_classMaterial_return;

typedef struct islParser_classPass_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    islParser_classPass_return;

typedef struct islParser_cstatements_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    islParser_cstatements_return;

typedef struct islParser_assignment_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    islParser_assignment_return;

typedef struct islParser_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    islParser_expr_return;

typedef struct islParser_addsubexpr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    islParser_addsubexpr_return;

typedef struct islParser_muldivexpr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    islParser_muldivexpr_return;

typedef struct islParser_atom_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    islParser_atom_return;

typedef struct islParser_list_or_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    islParser_list_or_expr_return;

typedef struct islParser_id_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    islParser_id_return;

typedef struct islParser_idinherit_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    islParser_idinherit_return;




/** Context tracking structure for islParser
 */
struct islParser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;


     islParser_script_return (*script)	(struct islParser_Ctx_struct * ctx);
     islParser_statements_return (*statements)	(struct islParser_Ctx_struct * ctx);
     islParser_classdef_return (*classdef)	(struct islParser_Ctx_struct * ctx);
     islParser_classType_return (*classType)	(struct islParser_Ctx_struct * ctx);
     islParser_classColor_return (*classColor)	(struct islParser_Ctx_struct * ctx);
     islParser_classMaterial_return (*classMaterial)	(struct islParser_Ctx_struct * ctx);
     islParser_classPass_return (*classPass)	(struct islParser_Ctx_struct * ctx);
     islParser_cstatements_return (*cstatements)	(struct islParser_Ctx_struct * ctx);
     islParser_assignment_return (*assignment)	(struct islParser_Ctx_struct * ctx);
     islParser_expr_return (*expr)	(struct islParser_Ctx_struct * ctx);
     islParser_addsubexpr_return (*addsubexpr)	(struct islParser_Ctx_struct * ctx);
     islParser_muldivexpr_return (*muldivexpr)	(struct islParser_Ctx_struct * ctx);
     islParser_atom_return (*atom)	(struct islParser_Ctx_struct * ctx);
     islParser_list_or_expr_return (*list_or_expr)	(struct islParser_Ctx_struct * ctx);
     islParser_id_return (*id)	(struct islParser_Ctx_struct * ctx);
     islParser_idinherit_return (*idinherit)	(struct islParser_Ctx_struct * ctx);
    // Delegated rules
    const char * (*getGrammarFileName)();
    void	    (*free)   (struct islParser_Ctx_struct * ctx);
    /* @headerFile.members() */
    pANTLR3_BASE_TREE_ADAPTOR	adaptor;
    pANTLR3_VECTOR_FACTORY		vectors;
    /* End @headerFile.members() */
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pislParser islParserNew         (pANTLR3_COMMON_TOKEN_STREAM instream);
ANTLR3_API pislParser islParserNewSSD      (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the parser will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif 
#define INTEGER      4
#define T__26      26
#define T__25      25
#define T__24      24
#define T__23      23
#define T__22      22
#define T__21      21
#define T__20      20
#define MCMT      13
#define FLOAT      5
#define EOF      -1
#define LPAREN      7
#define COLON      12
#define T__19      19
#define RPAREN      8
#define NAME      10
#define WS      15
#define T__16      16
#define T__18      18
#define T__17      17
#define COMMA      9
#define DOT      11
#define SCMT      14
#define STRING      6
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for islParser
 * =============================================================================
 */
/** \} */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
